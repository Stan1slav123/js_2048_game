{"version":3,"sources":["scripts/main.js"],"names":["score","gameWon","gameOver","board","initializeBoard","addRandomTile","updateBoard","document","querySelector","classList","add","textContent","emptyCells","r","c","push","row","column","length","randomCell","Math","floor","random","querySelectorAll","forEach","cell","index","x","y","className","checkWin","remove","checkGameOver","move","direction","moved","moveUp","moveDown","moveLeft","moveRight","col","nextCol","mergeCellsHorisontal","nextRow","mergeCellsVertical","restart","addEventListener","typeOfEvent","key","isGameStarted","alert"],"mappings":"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","file":"main.fba2e68b.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nlet score = 0;\nlet gameWon = false;\nlet gameOver = false;\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction initializeBoard() {\n  addRandomTile();\n  addRandomTile();\n  score = 0;\n  gameWon = false;\n  gameOver = false;\n  updateBoard();\n  document.querySelector('.message-start').classList.add('hidden');\n  document.querySelector('.button.start').textContent = 'Restart';\n  document.querySelector('.button.start').classList.add('restart');\n}\n\nfunction addRandomTile() {\n  const emptyCells = [];\n\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (board[r][c] === 0) {\n        emptyCells.push({ row: r, column: c });\n      }\n    }\n  }\n\n  if (emptyCells.length === 0) {\n    return;\n  }\n\n  const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n  board[randomCell.row][randomCell.column] = Math.random() < 0.9 ? 2 : 4;\n}\n\nfunction updateBoard() {\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const x = Math.floor(index / 4);\n    const y = index % 4;\n\n    cell.textContent = board[x][y] === 0 ? '' : board[x][y];\n    cell.className = 'field-cell';\n\n    if (board[x][y] !== 0) {\n      cell.classList.add('field-cell--' + board[x][y]);\n    }\n  });\n\n  document.querySelector('.game-score').textContent = score;\n\n  if (checkWin()) {\n    gameWon = true;\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (checkGameOver()) {\n    gameOver = true;\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\nfunction move(direction) {\n  if (gameWon || gameOver) {\n    return;\n  }\n\n  let moved = false;\n\n  switch (direction) {\n    case 'ArrowUp':\n      moved = moveUp();\n      break;\n    case 'ArrowDown':\n      moved = moveDown();\n      break;\n    case 'ArrowLeft':\n      moved = moveLeft();\n      break;\n    case 'ArrowRight':\n      moved = moveRight();\n      break;\n  }\n\n  if (moved) {\n    addRandomTile();\n    updateBoard();\n  }\n}\n\nfunction moveLeft() {\n  let moved = false;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 3; col > 0; col--) {\n      if (board[row][col] !== 0) {\n        let nextCol = col - 1;\n\n        while (nextCol >= 0 && nextCol === col - 1) {\n          if (board[row][nextCol] === 0) {\n            board[row][nextCol] = board[row][col];\n            board[row][col] = 0;\n            col = nextCol;\n            moved = true;\n            moveLeft();\n          } else if (board[row][nextCol] === board[row][col]) {\n            mergeCellsHorisontal(nextCol, col, row);\n            moved = true;\n            break;\n          } else {\n            break;\n          }\n          nextCol--;\n        }\n      }\n    }\n  }\n\n  return moved;\n}\n\nfunction moveRight() {\n  let moved = false;\n\n  for (let row = 0; row < 4; row++) {\n    for (let col = 0; col < 3; col++) {\n      if (board[row][col] !== 0) {\n        let nextCol = col + 1;\n\n        while (nextCol < 4 && nextCol === col + 1) {\n          if (board[row][nextCol] === 0) {\n            board[row][nextCol] = board[row][col];\n            board[row][col] = 0;\n            col = nextCol - 1;\n            moved = true;\n            moveRight();\n          } else if (board[row][nextCol] === board[row][col]) {\n            mergeCellsHorisontal(nextCol, col, row);\n            moved = true;\n            break;\n          } else {\n            break;\n          }\n          nextCol++;\n        }\n      }\n    }\n  }\n\n  return moved;\n}\n\nfunction moveUp() {\n  let moved = false;\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 1; row < 4; row++) {\n      if (board[row][col] !== 0) {\n        let nextRow = row - 1;\n\n        while (nextRow >= 0 && nextRow === row - 1) {\n          if (board[nextRow][col] === 0) {\n            board[nextRow][col] = board[row][col];\n            board[row][col] = 0;\n            row = nextRow;\n            moved = true;\n            moveUp();\n          } else if (board[nextRow][col] === board[row][col]) {\n            mergeCellsVertical(nextRow, col, row);\n            moved = true;\n            break;\n          } else {\n            break;\n          }\n          nextRow--;\n        }\n      }\n    }\n  }\n\n  return moved;\n}\n\nfunction moveDown() {\n  let moved = false;\n\n  for (let col = 0; col < 4; col++) {\n    for (let row = 2; row >= 0; row--) {\n      if (board[row][col] !== 0) {\n        let nextRow = row + 1;\n\n        while (nextRow < 4 && nextRow === row + 1) {\n          if (board[nextRow][col] === 0) {\n            board[nextRow][col] = board[row][col];\n            board[row][col] = 0;\n            row = nextRow;\n            moved = true;\n            moveDown();\n          } else if (board[nextRow][col] === board[row][col]) {\n            mergeCellsVertical(nextRow, col, row);\n            moved = true;\n            break;\n          } else {\n            break;\n          }\n          nextRow++;\n        }\n      }\n    }\n  }\n\n  return moved;\n}\n\nfunction mergeCellsVertical(nextRow, col, row) {\n  board[nextRow][col] *= 2;\n  score += board[nextRow][col];\n  board[row][col] = 0;\n}\n\nfunction mergeCellsHorisontal(nextCol, col, row) {\n  board[row][nextCol] *= 2;\n  score += board[row][nextCol];\n  board[row][col] = 0;\n}\n\nfunction checkWin() {\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (board[r][c] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction checkGameOver() {\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (board[r][c] === 0) {\n        return false;\n      }\n\n      if (\n        (r < 3 && board[r][c] === board[r + 1][c]) ||\n        (c < 3 && board[r][c] === board[r][c + 1])\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\ndocument.addEventListener('keydown', function (typeOfEvent) {\n  move(typeOfEvent.key);\n});\n\ndocument.querySelector('.button.start').addEventListener('click', function () {\n  let isGameStarted = false;\n\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (board[r][c] !== 0) {\n        isGameStarted = true;\n        break;\n      }\n    }\n  }\n\n  if (isGameStarted === true) {\n    if (gameOver || gameWon) {\n      restart();\n    } else {\n      const message = `Are you sure you want to\n      start a new game? All progress will be lost.`;\n\n      alert(message);\n      restart();\n    }\n  } else {\n    initializeBoard();\n  }\n});\n\nfunction restart() {\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      board[r][c] = 0;\n    }\n  }\n\n  score = 0;\n  gameWon = false;\n  gameOver = false;\n\n  document.querySelector('.message-lose').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n\n  initializeBoard();\n}\n"]}